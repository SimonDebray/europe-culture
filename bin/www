#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var db = require('../firebase/firestore');
var storage = require('../firebase/storage');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || '3000';

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

io.on('connection', function (socket) {
  
  // User launch the app and enter a username
  socket.on('lobby.firstJoin', (data) => {
    
    // Save each user data in socket
    socket.ip = requestIp.getClientIp(socket.request);
    socket.username = data.username;
    socket.language = data.language;
    socket.channel = 'lobby';
    
    console.log('lobby', 'fistJoin', `[${socket.username}]`.bold + ' join channel with IP ' + `${socket.ip}`);
    
    // Join the lobby
    socket.join(socket.channel);
    
    // Create user profile
    let docRef = db.collection('users').doc(data.username);
    
    let setData = docRef.set({
      username: data.username,
      language: data.language,
      level: 1,
      points: 0,
    });
    
    // Add new user to connected users list
    
    // Add new user to the lobby list
  });
  
  // User launch the app and enter a username
  socket.on('lobby.join', (data) => {
    
    // Save each user data in socket
    socket.ip = requestIp.getClientIp(socket.request);
    socket.username = data.username;
    socket.language = data.language;
    socket.channel = 'lobby';
    
    console.log('lobby', 'join', `[${socket.username}]`.bold + ' join channel with IP ' + `${socket.ip}`);
    
    // Join the lobby
    socket.join(socket.channel);
    
    // Add new user to connected users list
    
    // Add new user to the lobby list
    
    // If in disconnected users list, remove him
  });
  
  // User launch the app and enter a username
  socket.on('matchmaking.join', (data) => {
    
    // Save each user data in socket
    socket.channel = 'matchmaking';
    
    console.log('matchmaking', 'join', `[${socket.username}]`.bold + ' join channel with IP ' + `${socket.ip}`);
    
    // Join the lobby
    socket.join(socket.channel);
    
    // Remove user to the lobby list
    
    // Trigger matchmaking once at least 2 users are in the channel
    // If only one user trigger a game against CPU
    
  });
  
  // Handle disconnection
  socket.on('disconnect', () => {
    console.log('socket', 'disconnect', ('[' + socket.username + ']').bold + ' socket closed');
    
    // Remove from his current room
    
    // Remove from connected
    
    // Add user to disconnected user
    
  });
  
  // Handle disconnection
  socket.on('question.new', (data) => {
    
    let addDoc = db.collection(data.country).add(
      data
    ).then(ref => {
      console.log('Added document with ID: ', ref.id);
      socket.emit("question.success", "Success");
    });
  });
});
