#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var db = require('../firebase/firestore');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || '3000';

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

let matchmakingClients = [],
  gameList = {};

io.on('connection', function (socket) {
  
  // User launch the app and enter a username
  socket.on('lobby.firstJoin', (data) => {
    
    // Save each user data in socket
    socket.username = data.username;
    socket.language = data.language;
    socket.channel = 'lobby';
    
    // Join the lobby
    socket.join(socket.channel);
    
    // Create user profile
    let docRef = db.collection('users').doc(data.username);
    
    let setData = docRef.set({
      username: data.username,
      language: data.language,
      level: 1,
      points: 0,
    });
  });
  
  // User launch the app and enter a username
  socket.on('lobby.join', (data) => {
    
    // Save each user data in socket
    socket.username = data.username;
    socket.language = data.language;
    socket.channel = 'lobby';
    
    // Join the lobby
    socket.join(socket.channel);
    
    // Add new user to connected users list
    
    // Add new user to the lobby list
    
    // If in disconnected users list, remove him
  });
  
  // User launch the app and enter a username
  socket.on('matchmaking.join', (data) => {
    
    console.log(socket.username);
    
    // Save each user data in socket
    socket.channel = 'matchmaking';
    
    console.log('matchmaking', 'join', `[${socket.username}]` + ' join channel');
    
    // Join the lobby
    socket.join(socket.channel);
    
    if (matchmakingClients.indexOf(socket) === -1) matchmakingClients.push(socket);
    
    if (matchmakingClients.length > 1) {
      let index = getRndInteger(0,matchmakingClients.length - 1);
      
      console.log(index);
      
      let opponent = matchmakingClients[index];
      
      if (opponent === socket) {
        while (opponent === socket) {
          index = getRndInteger(0, matchmakingClients.length - 1);
          opponent = matchmakingClients[index];
        }
      }
      
      const gameId = "game-" + makeId(8);
  
      gameList[gameId] = {};
      
      // Fetch card data from firestore
  
      let citiesRef = db.collection(socket.language);
      let allQuestions = citiesRef.get()
        .then(snapshot => {
          var cards = [];
          
          snapshot.forEach(doc => {
            
            cards.push(doc.data());
          });
  
          gameList[gameId][socket.username] = {
            cards: cards,
            points: 0,
            socket: socket,
            round: 0
          };
  
          socket.join(gameId);
          socket.emit('game.init', {
            cards: gameList[gameId][socket.username].cards,
            opponentUsername: opponent.username,
            opponentLanguage: opponent.language,
            time: 0,
            gameId: gameId
          });
          
        })
        .catch(err => {
          console.log('Error getting documents', err);
        });
  
      let citiesRef2 = db.collection(opponent.language);
      let allQuestions2 = citiesRef.get()
        .then(snapshot => {
          var cards2 = [];
      
          snapshot.forEach(doc => {
        
            cards2.push(doc.data());
          });
          
          gameList[gameId][opponent.username] = {
            cards: cards2,
            points: 0,
            socket: opponent,
            round: 0
          };
          
          opponent.join(gameId);
          opponent.emit('game.init', {
            cards: gameList[gameId][opponent.username].cards,
            opponentUsername: socket.username,
            opponentLanguage: socket.language,
            time: 0,
            gameId: gameId
          });
      
        })
        .catch(err => {
          console.log('Error getting documents', err);
        });
      
      
      let indexToRemove = [matchmakingClients.indexOf(socket), matchmakingClients.indexOf(opponent)];
      
      for(let i = 0; i < indexToRemove.length; i++) {
        matchmakingClients.splice(indexToRemove[i]);
      }
    }
    // Trigger matchmaking once at least 2 users are in the channel
    // If only one user trigger a game against CPU
  });
  
  socket.on('game.sendQuestion', (data) => {
    data.card.responses = [];
    
    if (data.card.false1) data.card.responses.push(data.card.false1);
    if (data.card.false2) data.card.responses.push(data.card.false2);
    if (data.card.false3) data.card.responses.push(data.card.false3);
    
    gameList[data.game.gameId][data.game.opponentUsername].socket.emit('game.receiveQuestion', {question: data.card, gameId: data.game.gameId})
  });
  
  socket.on('game.sendResponse', (data) => {
    if (data.response === data.question.response) {
      gameList[data.game.gameId][socket.username].points += 1;
      
      socket.emit('game.result', true);
    }
    else {
      socket.emit('game.result', false);
    }
  
    gameList[data.game.gameId][socket.username].round += 1;
    
    if (gameList[data.game.gameId][socket.username].round !== gameList[data.game.gameId][data.game.opponentUsername].round) {
      socket.emit('game.ping');
    }
    else {
      socket.emit('game.nextRound');
    }
  });
  
  socket.on('game.ping', (data) => {
    if (gameList[data.gameId][socket.username].round !== gameList[data.gameId][data.opponentUsername].round) {
      socket.emit('game.ping');
    }
    else {
      socket.emit('game.nextRound');
    }
  });
  
  // Handle disconnection
  socket.on('disconnect', () => {
    console.log("disconnect");
    console.log(socket.username)
    
    // Remove from his current room
    
    // Remove from connected
    
    // Add user to disconnected user
    
  });
});

function makeId(length) {
  var result           = '';
  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var charactersLength = characters.length;
  for ( var i = 0; i < length; i++ ) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1) ) + min;
}
